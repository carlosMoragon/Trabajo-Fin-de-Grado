// const { Middleware } = require('swagger-express-middleware');
/*const http = require('http');
const fs = require('fs');
const path = require('path');
const swaggerUI = require('swagger-ui-express');
const jsYaml = require('js-yaml');
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const OpenApiValidator = require('express-openapi-validator');
const logger = require('./logger');
const config = require('./config');

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml));
    } catch (e) {
      logger.error('failed to start Express Server', e.message);
    }
    this.setupMiddleware();
  }

  setupMiddleware() {
    // this.setupAllowedMedia();
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    // Simple test to see that the server is up and responding
    this.app.get('/hello', (req, res) => res.send(`Hello and welcome to Metabolite Separation API`));
    // Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req, res) => res.sendFile((path.join(__dirname, 'api', 'openapi.yaml'))));
    // View the openapi document in a visual interface. Should be able to test from this page
    this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));
    this.app.get('/login-redirect', (req, res) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.get('/oauth2-redirect.html', (req, res) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        operationHandlers: path.join(__dirname),
        fileUploader: { dest: config.FILE_UPLOAD_PATH },
      }),
    );
  }

  launch() {
    // eslint-disable-next-line no-unused-vars
    this.app.use((err, req, res, next) => {
      // format errors
      res.status(err.status || 500).json({
        message: err.message || err,
        errors: err.errors || '',
      });
    });

    http.createServer(this.app).listen(this.port);
    console.log(`Listening on port ${this.port}`);
  }

  async close() {
    if (this.server !== undefined) {
      await this.server.close();
      console.log(`Server on port ${this.port} shut down`);
    }
  }
}

module.exports = ExpressServer;
*/
const http = require('http');
const fs = require('fs');
const path = require('path');
const swaggerUI = require('swagger-ui-express');
const jsYaml = require('js-yaml');
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const OpenApiValidator = require('express-openapi-validator');
const mongoose = require('mongoose');
const Log = require('./models/Log');  // Asegúrate de que el modelo esté importado correctamente
const logger = require('./logger');
const config = require('./config');

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml));
    } catch (e) {
      logger.error('failed to start Express Server', e.message);
    }
    this.setupMiddleware();
  }

  setupMiddleware() {
    // Middleware para registrar la petición y la respuesta
    this.app.use(bodyParser.json({ limit: '14MB' }));  // Asegúrate de que body-parser sea lo primero

    // Verificar y depurar el cuerpo de la solicitud
    this.app.use(async (req, res, next) => {
      console.log('Request Body:', req.body);  // Ver qué se está recibiendo

      // Guardar la solicitud antes de procesarla
      const requestLog = {
        method: req.method,
        url: req.originalUrl,
        body: req.body ? JSON.stringify(req.body) : 'No body',  // Aseguramos que el cuerpo se guarde correctamente
        headers: req.headers,
        params: req.params,
      };

      // Interceptar el send de la respuesta para obtener la respuesta antes de que se envíe
      const originalSend = res.send;
      res.send = async (body) => {
        const respondLog = {
          status: res.statusCode,
          body: body,
        };

        // Determinar la colección según la ruta
        let collectionName = req.originalUrl.split('/')[1];  // Obtenemos la primera parte de la URL (ej. "predict")
        if (collectionName) {
          collectionName = collectionName.toLowerCase();  // Aseguramos que sea en minúsculas
        }

        // Guardar el log en la colección correspondiente en MongoDB
        try {
          // Crear el log en la colección específica
          const logModel = mongoose.model(collectionName, Log.schema);
          await logModel.create({
            request: requestLog,
            respond: respondLog,
            API_version: '1',  // Guardar la versión de la API
          });
        } catch (error) {
          logger.error('Error saving log to database', error.message);
        }

        // Llamar al método original de send
        originalSend.call(res, body);
      };

      next();
    });

    // Otras configuraciones del middleware
    this.app.use(cors());
    this.app.use(express.json());  // Para manejar JSON nativo de Express
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());

    // Rutas básicas
    this.app.get('/hello', (req, res) => res.send(`Hello and welcome to Metabolite Separation API`));

    // Enviar el documento openapi generado
    this.app.get('/openapi', (req, res) => res.sendFile(path.join(__dirname, 'api', 'openapi.yaml')));

    // Visualización de la documentación con swagger
    this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));

    // Configuración para la validación del OpenAPI
    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        operationHandlers: path.join(__dirname),
        fileUploader: { dest: config.FILE_UPLOAD_PATH },
      }),
    );
  }

  launch() {
    // Middleware para manejar errores
    this.app.use((err, req, res, next) => {
      res.status(err.status || 500).json({
        message: err.message || err,
        errors: err.errors || '',
      });
    });

    http.createServer(this.app).listen(this.port, () => {
      console.log(`Listening on port ${this.port}`);
    });
  }

  async close() {
    if (this.server !== undefined) {
      await this.server.close();
      console.log(`Server on port ${this.port} shut down`);
    }
  }
}

module.exports = ExpressServer;
